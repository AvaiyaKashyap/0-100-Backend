/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());



  app.get('/todos', (req, res) => {
    // to reterieve all todo item...
    const filename = path.join(__dirname, 'toDo.json');

    try {

        fs.readFile(filename, 'utf-8', (error, data) => {
            console.log('file read successfully');
            res.json(data);
        });
    } catch (error) {
        console.log(error);
        res.status(500).send('internal server error');
    }
});


app.get('/todos/:id', (req, res) => {
    // to get a particular todo item acc. to id

    fs.readFile("todos.json", "utf8", function(err, data) {
        if (err) throw err;
        const todos = JSON.parse(data);
        const todoIndex = findIndex(todos, parseInt(req.params.id));
        if (todoIndex === -1) {
          res.status(404).send();
        } else {
          res.json(todos[todoIndex]);
        }
      });



});


app.post('/todos', (req, res) => {
    // to create a new todo item...
    //  also generates an unique id for each todo item;

    // function to generate unique id's ______________________________________________
    function uniqueId(array) {

        let uniqueid = 0;

        do {
            uniqueid = Math.floor(Math.random() * 1000 + 1);

        } while (existingid(array, uniqueid));

        console.log(uniqueid);
        return uniqueid;

    }



    function existingid(array, uniqueid) {

        for (let i = 0; i < array.length; i++) {

            if (array[i].id === uniqueid) {

                return true;
            }
        }
        return false;
    }
    //____________________________________________________________________________



   
    // reading file___________________________________________________________________
    fs.readFile('toDo.json', 'utf-8', (error, data) => {

        if (error) res.status(500).send('internal server error');
        else {
           const fileData = JSON.parse(data);
            let id = uniqueId(fileData);
            const titleOfToDo = req.body.title;
            const descriptionOfToDo = req.body.description;
            const completedOfToDo = req.body.completed;
            const newtodo = {
                'id': id,
                'title': titleOfToDo,
                'completed': completedOfToDo,
                'description': descriptionOfToDo
            };

            const jsontodo = JSON.parse(JSON.stringify(newtodo));
            fileData.push(jsontodo);

            const updatedFile = JSON.stringify(fileData);

            //____________________________________________________________________________


            fs.writeFile('toDo.json', updatedFile, 'utf-8', (error, data) => {

                if (error) res.status(500).send('Internal server error');
                else {
                    res.status(200).send('New toDo item added');
                }
            });
        }

    });

});




app.put('/todos/:id', (req, res) => {
    // to update the existing todo item based on there id

    
  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    const todos = JSON.parse(data);
    const todoIndex = findIndex(todos, parseInt(req.params.id));
    if (todoIndex === -1) {
      res.status(404).send();
    } else {
      const updatedTodo = {
        id: todos[todoIndex].id,
        title: req.body.title,
        description: req.body.description
      };
      todos[todoIndex] = updatedTodo;
      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) throw err;
        res.status(200).json(updatedTodo);
      });
    }
  });


});

app.delete('/todos/:id', (req, res) => {
    // to delete a particular todo based on there id 

    

  fs.readFile("todos.json", "utf8", (err, data) => {
    if (err) throw err;
    let todos = JSON.parse(data);
    const todoIndex = findIndex(todos, parseInt(req.params.id));
    if (todoIndex === -1) {
      res.status(404).send();
    } else {
      todos = removeAtIndex(todos, todoIndex);
      fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
        if (err) throw err;
        res.status(200).send();
      });
    }
  });
});

// for all other routes, return 404
app.use((req, res, next) => {
  res.status(404).send();


});






app.listen(port);

  
  module.exports = app;